function [r,shield] = compute_trajectory_B(r0, v0, q, m, R, rho, I, dt, T_max)
  % Computes the trajectory of a charged particle across a field B
  % generated by a charged Torus of radius R, internal radius rho, and current
  % intensity I
  %
  % INPUT:
  % v0 - Initial speed [vx0, vy0, vz0]
  % r0 - Initial position [x0, y0, z0]
  % q - Particle charge
  % m - Particle mass
  % R - Torus external radius
  % rho - Torus internal radius
  % I - Current intensity
  % dt - Integration step
  % T_max - Total time of simulation
  %
  % OUTPUT:
  % r - Array Nx3 containing the points of the particle trajectory
  % shield - Boolean variable. If true, the particle didn't hit the Torus.

  % Set shield as true
  shield = true;
  
  % Number of steps
  N = round(T_max / dt);

  % Initialization of position and speed
  r = zeros(N, 3); % Position [x, y, z]
  v = zeros(N, 3); % Speed [vx, vy, vz]
  r(1, :) = r0;
  v(1, :) = v0;
  
  % Main integration loop
  for i = 1:N-1
    % Compute magnetic field at the i-th point
    [Bx, By, Bz] = compute_B_field(R, I, r(i,:),rho);
    B = [Bx, By, Bz];

    % Compute Lorenz force
    F = q.*cross(v(i, :), B);

    % Compute acceleration
    a = F./m;

    % Update position and speed
    v(i+1, :) = v(i, :) + dt.*a;
    r(i+1, :) = r(i, :) + dt.*(v(i+1, :)+v(i, :))./2;
    
    % If the Torus gets hit, set shield as False
    x_t = r(i+1,1);
    y_t = r(i+1,2);
    z_t = r(i+1,3);
    if power(R - sqrt(x_t^2+y_t^2), 2)+z_t^2 < rho
        shield = false;
    end

    %display(B, 'field');
    %display(F, 'force');
    %display(a,'acc.');
    %display(v(i+1,:), 'speed');
    %display(r(i+1,:), 'pos.');
  end
end